{"version":3,"sources":["../src/plugin.ts","../src/__tests__/e2e/starter-plugin.ts","../src/services/pythonService.ts","../src/services/deploymentService.ts","../src/services/autoKnowledgeService.ts","../src/actions/analyzeMolecularData.ts","../src/actions/generateVisualization.ts","../src/actions/parseGaussianFile.ts","../src/actions/diagnostics.ts","../src/actions/autoKnowledgeAction.ts","../src/index.ts"],"sourcesContent":["import type { Plugin } from '@elizaos/core';\nimport {\n  type Action,\n  type Content,\n  type GenerateTextParams,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  ModelType,\n  type Provider,\n  type ProviderResult,\n  Service,\n  type State,\n  logger,\n} from '@elizaos/core';\nimport { z } from 'zod';\nimport { StarterPluginTestSuite } from './tests';\n\n// Import Python service and actions\nimport { PythonService } from './services/pythonService';\nimport { DeploymentService } from './services/deploymentService';\nimport { AutoKnowledgeService } from './services/autoKnowledgeService';\nimport { analyzeMolecularDataAction } from './actions/analyzeMolecularData';\nimport { generateVisualizationAction } from './actions/generateVisualization';\nimport { parseGaussianFileAction } from './actions/parseGaussianFile';\nimport { diagnosticsAction } from './actions/diagnostics';\nimport { autoKnowledgeAction } from './actions/autoKnowledgeAction';\n\n/**\n * Defines the configuration schema for the computational chemistry plugin\n */\nconst configSchema = z.object({\n  PYTHON_PATH: z\n    .string()\n    .optional()\n    .default('python3')\n    .transform((val) => {\n      if (!val) {\n        logger.info('Using default Python path: python3');\n      }\n      return val || 'python3';\n    }),\n  PYTHON_DEBUG: z\n    .string()\n    .optional()\n    .transform((val) => {\n      return val === 'true' ? 'true' : 'false';\n    }),\n  COMPCHEM_DATA_DIR: z\n    .string()\n    .optional()\n    .default('./data')\n    .transform((val) => {\n      return val || './data';\n    }),\n});\n\n/**\n * Example HelloWorld action\n * This demonstrates the simplest possible action structure\n */\n/**\n * Action representing a hello world message.\n * @typedef {Object} Action\n * @property {string} name - The name of the action.\n * @property {string[]} similes - An array of related actions.\n * @property {string} description - A brief description of the action.\n * @property {Function} validate - Asynchronous function to validate the action.\n * @property {Function} handler - Asynchronous function to handle the action and generate a response.\n * @property {Object[]} examples - An array of example inputs and expected outputs for the action.\n */\nconst helloWorldAction: Action = {\n  name: 'HELLO_WORLD',\n  similes: ['GREET', 'SAY_HELLO'],\n  description: 'Responds with a simple hello world message',\n\n  validate: async (\n    _runtime: IAgentRuntime,\n    _message: Memory,\n    _state: State | undefined\n  ): Promise<boolean> => {\n    // Always valid\n    return true;\n  },\n\n  handler: async (\n    _runtime: IAgentRuntime,\n    message: Memory,\n    _state: State | undefined,\n    _options: any,\n    callback?: HandlerCallback,\n    _responses?: Memory[]\n  ) => {\n    try {\n      logger.info('Handling HELLO_WORLD action');\n\n      // Simple response content\n      const responseContent: Content = {\n        text: 'hello world!',\n        actions: ['HELLO_WORLD'],\n        source: message.content.source,\n      };\n\n      // Call back with the hello world message if callback is provided\n      if (callback) {\n        await callback(responseContent);\n      }\n\n      return responseContent;\n    } catch (error) {\n      logger.error('Error in HELLO_WORLD action:', error);\n      throw error;\n    }\n  },\n\n  examples: [\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'Can you say hello?',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'hello world!',\n          actions: ['HELLO_WORLD'],\n        },\n      },\n    ],\n  ],\n};\n\n/**\n * Example Hello World Provider\n * This demonstrates the simplest possible provider implementation\n */\nconst helloWorldProvider: Provider = {\n  name: 'HELLO_WORLD_PROVIDER',\n  description: 'A simple example provider',\n\n  get: async (\n    _runtime: IAgentRuntime,\n    _message: Memory,\n    _state: State | undefined\n  ): Promise<ProviderResult> => {\n    return {\n      text: 'I am a provider',\n      values: {},\n      data: {},\n    };\n  },\n};\n\nexport class CompchemService extends Service {\n  static serviceType = 'compchem-manager';\n  capabilityDescription =\n    'Computational chemistry management service that coordinates molecular analysis and Python integration.';\n  \n  constructor(runtime: IAgentRuntime) {\n    super(runtime);\n  }\n\n  static async start(runtime: IAgentRuntime) {\n    logger.info(`üß™ Starting computational chemistry service: ${new Date().toISOString()}`);\n    const service = new CompchemService(runtime);\n    \n    // Check if Python service is available\n    const pythonService = runtime.getService<PythonService>('python-execution');\n    if (pythonService) {\n      logger.info('‚úÖ Python integration available');\n      \n      // Check Python environment\n      try {\n        const pythonEnv = await pythonService.checkPythonEnvironment();\n        if (pythonEnv.pythonAvailable) {\n          logger.info(`üêç Python ${pythonEnv.pythonVersion} detected`);\n          logger.info(`üì¶ Available packages: ${pythonEnv.packagesAvailable.join(', ')}`);\n          if (pythonEnv.packagesMissing.length > 0) {\n            logger.warn(`‚ö†Ô∏è  Missing packages: ${pythonEnv.packagesMissing.join(', ')}`);\n          }\n        } else {\n          logger.warn('‚ö†Ô∏è  Python environment not available');\n        }\n      } catch (error) {\n        logger.warn('‚ö†Ô∏è  Could not check Python environment:', error);\n      }\n    } else {\n      logger.warn('‚ö†Ô∏è  Python service not available');\n    }\n    \n    return service;\n  }\n\n  static async stop(runtime: IAgentRuntime) {\n    logger.info('üß™ Stopping computational chemistry service');\n    const service = runtime.getService(CompchemService.serviceType);\n    if (!service) {\n      throw new Error('Computational chemistry service not found');\n    }\n    service.stop();\n  }\n\n  async stop() {\n    logger.info('üß™ Computational chemistry service stopped');\n  }\n}\n\nexport const myCompchemPlugin: Plugin = {\n  name: 'my-compchem-plugin-v2',\n  description: 'Advanced computational chemistry plugin for ElizaOS with Python integration and persistent knowledge graph storage',\n  config: {\n    PYTHON_PATH: process.env.PYTHON_PATH,\n    PYTHON_DEBUG: process.env.PYTHON_DEBUG,\n    COMPCHEM_DATA_DIR: process.env.COMPCHEM_DATA_DIR,\n  },\n  async init(config: Record<string, string>) {\n    logger.info('üß™ Initializing computational chemistry plugin v2');\n    try {\n      const validatedConfig = await configSchema.parseAsync(config);\n\n      // Set all environment variables at once\n      for (const [key, value] of Object.entries(validatedConfig)) {\n        if (value) process.env[key] = value;\n      }\n      \n      logger.info('‚úÖ Plugin configuration validated successfully');\n      logger.info(`üêç Python path: ${validatedConfig.PYTHON_PATH}`);\n      logger.info(`üìÅ Data directory: ${validatedConfig.COMPCHEM_DATA_DIR}`);\n      \n      // Auto-deploy Python files to agent directory\n      try {\n        await DeploymentService.deployPythonFiles();\n      } catch (deployError) {\n        logger.warn('‚ö†Ô∏è  Failed to auto-deploy Python files:', deployError);\n        logger.warn('You may need to manually copy Python files to the agent directory');\n      }\n      \n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        throw new Error(\n          `Invalid plugin configuration: ${error.errors.map((e) => e.message).join(', ')}`\n        );\n      }\n      throw error;\n    }\n  },\n  models: {\n    [ModelType.TEXT_SMALL]: async (\n      _runtime,\n      { prompt, stopSequences = [] }: GenerateTextParams\n    ) => {\n      return 'Never gonna give you up, never gonna let you down, never gonna run around and desert you...';\n    },\n    [ModelType.TEXT_LARGE]: async (\n      _runtime,\n      {\n        prompt,\n        stopSequences = [],\n        maxTokens = 8192,\n        temperature = 0.7,\n        frequencyPenalty = 0.7,\n        presencePenalty = 0.7,\n      }: GenerateTextParams\n    ) => {\n      return 'Never gonna make you cry, never gonna say goodbye, never gonna tell a lie and hurt you...';\n    },\n  },\n  routes: [\n    {\n      name: 'hello-world-route',\n      path: '/helloworld',\n      type: 'GET',\n      handler: async (_req: any, res: any) => {\n        // send a response\n        res.json({\n          message: 'Hello World!',\n        });\n      },\n    },\n    {\n      name: 'current-time-route',\n      path: '/api/time',\n      type: 'GET',\n      handler: async (_req: any, res: any) => {\n        // Return current time in various formats\n        const now = new Date();\n        res.json({\n          timestamp: now.toISOString(),\n          unix: Math.floor(now.getTime() / 1000),\n          formatted: now.toLocaleString(),\n          timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n        });\n      },\n    },\n  ],\n  events: {\n    MESSAGE_RECEIVED: [\n      async (params) => {\n        logger.debug('MESSAGE_RECEIVED event received');\n        // print the keys\n        logger.debug(Object.keys(params));\n      },\n    ],\n    VOICE_MESSAGE_RECEIVED: [\n      async (params) => {\n        logger.debug('VOICE_MESSAGE_RECEIVED event received');\n        // print the keys\n        logger.debug(Object.keys(params));\n      },\n    ],\n    WORLD_CONNECTED: [\n      async (params) => {\n        logger.debug('WORLD_CONNECTED event received');\n        // print the keys\n        logger.debug(Object.keys(params));\n      },\n    ],\n    WORLD_JOINED: [\n      async (params) => {\n        logger.debug('WORLD_JOINED event received');\n        // print the keys\n        logger.debug(Object.keys(params));\n      },\n    ],\n  },\n  services: [PythonService, CompchemService, AutoKnowledgeService],\n  actions: [helloWorldAction, analyzeMolecularDataAction, generateVisualizationAction, parseGaussianFileAction, diagnosticsAction, autoKnowledgeAction],\n  providers: [helloWorldProvider],\n  tests: [StarterPluginTestSuite],\n  // dependencies: ['@elizaos/plugin-knowledge'], <--- plugin dependecies go here (if requires another plugin)\n};\n\nexport default myCompchemPlugin;\n","import { type Content, type HandlerCallback } from '@elizaos/core';\n\n/**\n * E2E (End-to-End) Test Suite for ElizaOS Plugins\n * ================================================\n *\n * This file contains end-to-end tests that run within a real ElizaOS runtime environment.\n * Unlike unit tests that test individual components in isolation, e2e tests validate\n * the entire plugin behavior in a production-like environment.\n *\n * NOTE: The tests are properly structured and included in the plugin build.\n * If the test runner is not detecting these tests, it may be looking at the wrong\n * plugin name or there may be a test runner configuration issue. The tests are\n * exported correctly through src/tests.ts and included in the plugin's tests array.\n *\n * HOW E2E TESTS WORK:\n * -------------------\n * 1. Tests are executed by the ElizaOS test runner using `elizaos test e2e`\n * 2. Each test receives a real runtime instance with the plugin loaded\n * 3. Tests can interact with the runtime just like in production\n * 4. Tests throw errors to indicate failure (no assertion library needed)\n *\n * WRITING NEW E2E TESTS:\n * ----------------------\n * 1. Add a new test object to the `tests` array below\n * 2. Each test must have:\n *    - `name`: A unique identifier for the test\n *    - `fn`: An async function that receives the runtime and performs the test\n *\n * Example structure:\n * ```typescript\n * {\n *   name: 'my_new_test',\n *   fn: async (runtime) => {\n *     // Your test logic here\n *     if (someCondition !== expected) {\n *       throw new Error('Test failed: reason');\n *     }\n *   }\n * }\n * ```\n *\n * BEST PRACTICES:\n * ---------------\n * - Test real user scenarios, not implementation details\n * - Use descriptive test names that explain what's being tested\n * - Include clear error messages that help diagnose failures\n * - Test both success and failure paths\n * - Clean up any resources created during tests\n *\n * AVAILABLE RUNTIME METHODS:\n * --------------------------\n * - runtime.getService(type): Get a service instance\n * - runtime.character: Access character configuration\n * - runtime.models: Access AI models\n * - runtime.db: Access database methods\n * - runtime.actions: Access registered actions\n * - runtime.providers: Access registered providers\n *\n * For more details, see the ElizaOS documentation.\n */\n\n// Define a minimal TestSuite interface that matches what's needed\ninterface TestSuite {\n  name: string;\n  description?: string;\n  tests: Array<{\n    name: string;\n    fn: (runtime: any) => Promise<any>;\n  }>;\n}\n\n// Define minimal interfaces for the types we need\ntype UUID = `${string}-${string}-${string}-${string}-${string}`;\n\ninterface Memory {\n  entityId: UUID;\n  roomId: UUID;\n  content: {\n    text: string;\n    source: string;\n    actions?: string[];\n  };\n}\n\ninterface State {\n  values: Record<string, any>;\n  data: Record<string, any>;\n  text: string;\n}\n\nexport const StarterPluginTestSuite: TestSuite = {\n  name: 'plugin_starter_test_suite',\n  description: 'E2E tests for the starter plugin',\n\n  tests: [\n    /**\n     * Basic Plugin Verification Test\n     * ------------------------------\n     * This test verifies that the plugin is properly loaded and initialized\n     * within the runtime environment.\n     */\n    {\n      name: 'example_test',\n      fn: async (runtime) => {\n        // Test the character name\n        if (runtime.character.name !== 'Eliza') {\n          throw new Error(\n            `Expected character name to be \"Eliza\" but got \"${runtime.character.name}\"`\n          );\n        }\n        // Verify the plugin is loaded properly\n        const service = runtime.getService('starter');\n        if (!service) {\n          throw new Error('Starter service not found');\n        }\n      },\n    },\n\n    /**\n     * Action Registration Test\n     * ------------------------\n     * Verifies that custom actions are properly registered with the runtime.\n     * This is important to ensure actions are available for the agent to use.\n     */\n    {\n      name: 'should_have_hello_world_action',\n      fn: async (runtime) => {\n        // Access actions through runtime.actions instead of getPlugin\n        const actionExists = runtime.actions?.some((a) => a.name === 'HELLO_WORLD');\n        if (!actionExists) {\n          throw new Error('Hello world action not found in runtime actions');\n        }\n      },\n    },\n\n    /**\n     * Hello World Action Response Test\n     * ---------------------------------\n     * This test demonstrates a complete scenario where:\n     * 1. The agent is asked to say \"hello\"\n     * 2. The HELLO_WORLD action is triggered\n     * 3. The agent responds with text containing \"hello world\"\n     *\n     * This is a key pattern for testing agent behaviors - you simulate\n     * a user message and verify the agent's response.\n     */\n    {\n      name: 'hello_world_action_test',\n      fn: async (runtime) => {\n        // Create a test message asking the agent to say hello\n        const testMessage: Memory = {\n          entityId: '12345678-1234-1234-1234-123456789012' as UUID,\n          roomId: '12345678-1234-1234-1234-123456789012' as UUID,\n          content: {\n            text: 'Can you say hello?',\n            source: 'test',\n            actions: ['HELLO_WORLD'], // Specify which action we expect to trigger\n          },\n        };\n\n        // Create a test state (can include context if needed)\n        const testState: State = {\n          values: {},\n          data: {},\n          text: '',\n        };\n\n        let responseText = '';\n        let responseReceived = false;\n\n        // Find the hello world action in runtime.actions\n        const helloWorldAction = runtime.actions?.find((a) => a.name === 'HELLO_WORLD');\n        if (!helloWorldAction) {\n          throw new Error('Hello world action not found in runtime actions');\n        }\n\n        // Create a callback that captures the agent's response\n        // This simulates how the runtime would handle the action's response\n        const callback: HandlerCallback = async (response: Content) => {\n          responseReceived = true;\n          responseText = response.text || '';\n\n          // Verify the response includes the expected action\n          if (!response.actions?.includes('HELLO_WORLD')) {\n            throw new Error('Response did not include HELLO_WORLD action');\n          }\n\n          // Return Promise<Memory[]> as required by the HandlerCallback interface\n          return Promise.resolve([]);\n        };\n\n        // Execute the action - this simulates the runtime calling the action\n        await helloWorldAction.handler(runtime, testMessage, testState, {}, callback);\n\n        // Verify we received a response\n        if (!responseReceived) {\n          throw new Error('Hello world action did not produce a response');\n        }\n\n        // Verify the response contains \"hello world\" (case-insensitive)\n        if (!responseText.toLowerCase().includes('hello world')) {\n          throw new Error(`Expected response to contain \"hello world\" but got: \"${responseText}\"`);\n        }\n\n        // Success! The agent responded with \"hello world\" as expected\n      },\n    },\n\n    /**\n     * Provider Functionality Test\n     * ---------------------------\n     * Tests that providers can supply data to the agent when needed.\n     * Providers are used to fetch external data or compute values.\n     */\n    {\n      name: 'hello_world_provider_test',\n      fn: async (runtime) => {\n        // Create a test message\n        const testMessage: Memory = {\n          entityId: '12345678-1234-1234-1234-123456789012' as UUID,\n          roomId: '12345678-1234-1234-1234-123456789012' as UUID,\n          content: {\n            text: 'What can you provide?',\n            source: 'test',\n          },\n        };\n\n        // Create a test state\n        const testState: State = {\n          values: {},\n          data: {},\n          text: '',\n        };\n\n        // Find the hello world provider in runtime.providers\n        const helloWorldProvider = runtime.providers?.find(\n          (p) => p.name === 'HELLO_WORLD_PROVIDER'\n        );\n        if (!helloWorldProvider) {\n          throw new Error('Hello world provider not found in runtime providers');\n        }\n\n        // Test the provider\n        const result = await helloWorldProvider.get(runtime, testMessage, testState);\n\n        if (result.text !== 'I am a provider') {\n          throw new Error(`Expected provider to return \"I am a provider\", got \"${result.text}\"`);\n        }\n      },\n    },\n\n    /**\n     * Service Lifecycle Test\n     * ----------------------\n     * Verifies that services can be started, accessed, and stopped properly.\n     * Services run background tasks or manage long-lived resources.\n     */\n    {\n      name: 'starter_service_test',\n      fn: async (runtime) => {\n        // Get the service from the runtime\n        const service = runtime.getService('starter');\n        if (!service) {\n          throw new Error('Starter service not found');\n        }\n\n        // Check service capability description\n        if (\n          service.capabilityDescription !==\n          'This is a starter service which is attached to the agent through the starter plugin.'\n        ) {\n          throw new Error('Incorrect service capability description');\n        }\n\n        // Test service stop method\n        await service.stop();\n      },\n    },\n\n    /**\n     * ADD YOUR CUSTOM TESTS HERE\n     * --------------------------\n     * To add a new test:\n     *\n     * 1. Copy this template:\n     * ```typescript\n     * {\n     *   name: 'your_test_name',\n     *   fn: async (runtime) => {\n     *     // Setup: Create any test data needed\n     *\n     *     // Action: Perform the operation you want to test\n     *\n     *     // Assert: Check the results\n     *     if (result !== expected) {\n     *       throw new Error(`Expected ${expected} but got ${result}`);\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * 2. Common test patterns:\n     *    - Test action responses to specific prompts\n     *    - Verify provider data under different conditions\n     *    - Check service behavior during lifecycle events\n     *    - Validate plugin configuration handling\n     *    - Test error cases and edge conditions\n     *\n     * 3. Tips:\n     *    - Use meaningful variable names\n     *    - Include helpful error messages\n     *    - Test one thing per test\n     *    - Consider both success and failure scenarios\n     */\n  ],\n};\n\n// Export a default instance of the test suite for the E2E test runner\nexport default StarterPluginTestSuite;\n","import {\n  type IAgentRuntime,\n  Service,\n  logger,\n} from '@elizaos/core';\nimport { execFile, spawn } from 'child_process';\nimport { promisify } from 'util';\nimport * as path from 'path';\nimport { promises as fs } from 'fs';\nimport { fileURLToPath } from 'url';\nimport { DeploymentService } from './deploymentService';\n\n// ES modules equivalent of __dirname\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst execFileAsync = promisify(execFile);\n\nexport class PythonService extends Service {\n  static serviceType = 'python-execution';\n  \n  capabilityDescription = 'Enables the agent to execute Python scripts for molecular analysis and computational chemistry calculations';\n\n  constructor(runtime: IAgentRuntime) {\n    super(runtime);\n  }\n\n  static async start(runtime: IAgentRuntime): Promise<PythonService> {\n    const service = new PythonService(runtime);\n    \n    // Initialize service with runtime settings\n    const debugMode = runtime.getSetting('PYTHON_DEBUG') === 'true';\n    const pythonPath = runtime.getSetting('PYTHON_PATH') || 'python3';\n    \n    if (debugMode) {\n      logger.info('üêç Python Service initialized with debug mode');\n      logger.info(`   Python path: ${pythonPath}`);\n    }\n    \n    return service;\n  }\n\n  async stop(): Promise<void> {\n    logger.info('üêç Python Service stopped');\n  }\n\n  /**\n   * Execute a Python script using execFile (for simple scripts that return JSON)\n   */\n  async executePythonScript(\n    scriptPath: string,\n    args: string[] = [],\n    options: { timeout?: number } = {}\n  ): Promise<string> {\n    try {\n      const pythonInterpreter = this.runtime.getSetting('PYTHON_PATH') || 'python3';\n      const absoluteScriptPath = path.resolve(scriptPath);\n      \n      // Verify script exists\n      await fs.access(absoluteScriptPath);\n      \n      const { stdout } = await execFileAsync(pythonInterpreter, [absoluteScriptPath, ...args], {\n        timeout: options.timeout || 30000, // 30 second default timeout\n        encoding: 'utf8'\n      });\n      \n      return stdout;\n    } catch (error) {\n      logger.error('Python script execution failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Execute Python script with streaming output (for long-running processes)\n   */\n  async executePythonScriptStreaming(\n    scriptPath: string,\n    args: string[] = [],\n    onData?: (data: string) => void,\n    onError?: (data: string) => void\n  ): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const pythonInterpreter = this.runtime.getSetting('PYTHON_PATH') || 'python3';\n      const absoluteScriptPath = path.resolve(scriptPath);\n      \n      const pythonProcess = spawn(pythonInterpreter, [absoluteScriptPath, ...args], {\n        stdio: ['pipe', 'pipe', 'pipe']\n      });\n      \n      let stdout = '';\n      let stderr = '';\n      \n      pythonProcess.stdout.on('data', (data) => {\n        const output = data.toString();\n        stdout += output;\n        if (onData) onData(output);\n      });\n      \n      pythonProcess.stderr.on('data', (data) => {\n        const error = data.toString();\n        stderr += error;\n        if (onError) onError(error);\n      });\n      \n      pythonProcess.on('close', (code) => {\n        if (code === 0) {\n          resolve(stdout.trim());\n        } else {\n          logger.error(`‚ùå Python process failed with code ${code}: ${stderr}`);\n          reject(new Error(`Python script failed with code ${code}: ${stderr}`));\n        }\n      });\n      \n      pythonProcess.on('error', (error) => {\n        logger.error(`‚ùå Failed to start Python process: ${error}`);\n        reject(error);\n      });\n    });\n  }\n\n  /**\n   * Analyze molecular data using Python\n   */\n  async analyzeMolecularData(\n    molecularData: any,\n    analysisType: 'molecular' | 'energy' | 'visualization' = 'molecular'\n  ): Promise<any> {\n    try {\n      // Try to find the Python script in various locations\n      const possibleScriptPaths = [\n        path.join(process.cwd(), 'py', 'molecular_analyzer.py'),\n        path.join(__dirname, '..', '..', 'py', 'molecular_analyzer.py'),\n        path.join(__dirname, '..', '..', '..', 'py', 'molecular_analyzer.py'),\n        path.join(process.cwd(), 'plugins', 'my-compchem-plugin-v2', 'py', 'molecular_analyzer.py'),\n        './py/molecular_analyzer.py'\n      ];\n\n      let scriptPath: string | null = null;\n      for (const possiblePath of possibleScriptPaths) {\n        try {\n          await fs.access(possiblePath);\n          scriptPath = possiblePath;\n          break;\n        } catch {\n          // Script doesn't exist at this path, continue\n        }\n      }\n\n      if (!scriptPath) {\n        throw new Error(`Python script not found. Tried paths: ${possibleScriptPaths.join(', ')}`);\n      }\n\n      const dataJson = JSON.stringify(molecularData);\n      \n      const result = await this.executePythonScript(scriptPath, [\n        dataJson,\n        '--analysis_type', analysisType\n      ]);\n      \n      return JSON.parse(result);\n    } catch (error) {\n      logger.error('Molecular data analysis failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Generate visualization data using Python\n   */\n  async generateVisualization(\n    molecularData: any,\n    outputPath?: string\n  ): Promise<any> {\n    try {\n      // Try to find the Python script in various locations\n      const possibleScriptPaths = [\n        path.join(process.cwd(), 'py', 'molecular_analyzer.py'),\n        path.join(__dirname, '..', '..', 'py', 'molecular_analyzer.py'),\n        path.join(__dirname, '..', '..', '..', 'py', 'molecular_analyzer.py'),\n        path.join(process.cwd(), 'plugins', 'my-compchem-plugin-v2', 'py', 'molecular_analyzer.py'),\n        './py/molecular_analyzer.py'\n      ];\n\n      let scriptPath: string | null = null;\n      for (const possiblePath of possibleScriptPaths) {\n        try {\n          await fs.access(possiblePath);\n          scriptPath = possiblePath;\n          break;\n        } catch {\n          // Script doesn't exist at this path, continue\n        }\n      }\n\n      if (!scriptPath) {\n        throw new Error(`Python script not found. Tried paths: ${possibleScriptPaths.join(', ')}`);\n      }\n\n      const dataJson = JSON.stringify(molecularData);\n      \n      const args = [dataJson, '--analysis_type', 'visualization'];\n      if (outputPath) {\n        args.push('--output', outputPath);\n      }\n      \n      const result = await this.executePythonScript(scriptPath, args);\n      \n      if (outputPath) {\n        return { success: true, outputPath };\n      } else {\n        return JSON.parse(result);\n      }\n    } catch (error) {\n      logger.error('Visualization generation failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Parse Gaussian log files using cclib\n   */\n  async parseGaussianFile(\n    filePath: string,\n    metadata: any = {},\n    outputFormat: 'json' | 'turtle' = 'json'\n  ): Promise<any> {\n    try {\n      // Ensure Python files are deployed before attempting to use them\n      await this.ensurePythonFilesDeployed();\n      // Try to find the Python script in various locations\n      const possibleScriptPaths = [\n        path.join(process.cwd(), 'py', 'parse_gaussian_cclib.py'),\n        path.join(__dirname, '..', '..', 'py', 'parse_gaussian_cclib.py'),\n        path.join(__dirname, '..', '..', '..', 'py', 'parse_gaussian_cclib.py'),\n        path.join(process.cwd(), 'plugins', 'my-compchem-plugin-v2', 'py', 'parse_gaussian_cclib.py'),\n        './py/parse_gaussian_cclib.py'\n      ];\n\n      let scriptPath: string | null = null;\n      for (const possiblePath of possibleScriptPaths) {\n        try {\n          await fs.access(possiblePath);\n          scriptPath = possiblePath;\n          break;\n        } catch {\n          // Script doesn't exist at this path, continue\n        }\n      }\n\n      if (!scriptPath) {\n        throw new Error(`Python script not found. Tried paths: ${possibleScriptPaths.join(', ')}`);\n      }\n\n      const metadataJson = JSON.stringify(metadata);\n      const args = [filePath, metadataJson, '--format', outputFormat];\n      \n      const result = await this.executePythonScript(scriptPath, args);\n      \n      if (outputFormat === 'json') {\n        return JSON.parse(result);\n      } else {\n        return { rdf: result, success: true };\n      }\n    } catch (error) {\n      logger.error('Gaussian file parsing failed:', error);\n      return { error: error instanceof Error ? error.message : 'Unknown error', success: false };\n    }\n  }\n\n  /**\n   * Generate analysis plots using matplotlib\n   */\n  async generateAnalysisPlots(\n    chartType: string,\n    data: any,\n    outputPath?: string\n  ): Promise<any> {\n    try {\n      // Try to find the Python script in various locations\n      const possibleScriptPaths = [\n        path.join(process.cwd(), 'py', 'plot_gaussian_analysis.py'),\n        path.join(__dirname, '..', '..', 'py', 'plot_gaussian_analysis.py'),\n        path.join(__dirname, '..', '..', '..', 'py', 'plot_gaussian_analysis.py'),\n        path.join(process.cwd(), 'plugins', 'my-compchem-plugin-v2', 'py', 'plot_gaussian_analysis.py'),\n        './py/plot_gaussian_analysis.py'\n      ];\n\n      let scriptPath: string | null = null;\n      for (const possiblePath of possibleScriptPaths) {\n        try {\n          await fs.access(possiblePath);\n          scriptPath = possiblePath;\n          break;\n        } catch {\n          // Script doesn't exist at this path, continue\n        }\n      }\n\n      if (!scriptPath) {\n        throw new Error(`Python script not found. Tried paths: ${possibleScriptPaths.join(', ')}`);\n      }\n\n      const dataJson = JSON.stringify(data);\n      const args = outputPath \n        ? [chartType, dataJson, outputPath]\n        : [chartType, dataJson];\n        \n      const result = await this.executePythonScript(scriptPath, args);\n      \n      if (outputPath) {\n        return { success: true, outputPath, message: result };\n      } else {\n        return { success: true, output: result };\n      }\n    } catch (error) {\n      logger.error('Analysis plot generation failed:', error);\n      return { error: error instanceof Error ? error.message : 'Unknown error', success: false };\n    }\n  }\n\n  /**\n   * Check if Python and required packages are available\n   */\n  async checkPythonEnvironment(): Promise<{\n    pythonAvailable: boolean;\n    pythonVersion?: string;\n    packagesAvailable: string[];\n    packagesMissing: string[];\n    cclibAvailable: boolean;\n  }> {\n    try {\n      const pythonInterpreter = this.runtime.getSetting('PYTHON_PATH') || 'python3';\n      \n      // Check Python version\n      const { stdout: versionOutput } = await execFileAsync(pythonInterpreter, ['--version']);\n      const pythonVersion = versionOutput.trim();\n      \n      // Check required packages including cclib\n      const requiredPackages = ['numpy', 'matplotlib', 'scipy', 'pandas', 'seaborn', 'cclib'];\n      const packagesAvailable: string[] = [];\n      const packagesMissing: string[] = [];\n      \n      for (const pkg of requiredPackages) {\n        try {\n          await execFileAsync(pythonInterpreter, ['-c', `import ${pkg}; print(${pkg}.__version__)`]);\n          packagesAvailable.push(pkg);\n        } catch {\n          packagesMissing.push(pkg);\n        }\n      }\n      \n      const cclibAvailable = packagesAvailable.includes('cclib');\n      \n      return {\n        pythonAvailable: true,\n        pythonVersion,\n        packagesAvailable,\n        packagesMissing,\n        cclibAvailable\n      };\n    } catch (error) {\n      logger.warn('Python environment check failed:', error);\n      return {\n        pythonAvailable: false,\n        packagesAvailable: [],\n        packagesMissing: ['numpy', 'matplotlib', 'scipy', 'pandas', 'seaborn', 'cclib'],\n        cclibAvailable: false\n      };\n    }\n  }\n\n  /**\n   * Ensure Python files are deployed and available\n   */\n  private async ensurePythonFilesDeployed(): Promise<void> {\n    const deployment = DeploymentService.checkDeployment();\n    if (!deployment.deployed) {\n      logger.info(`üöÄ Auto-deploying missing Python files: ${deployment.missing.join(', ')}`);\n      try {\n        await DeploymentService.deployPythonFiles();\n      } catch (error) {\n        logger.warn('‚ö†Ô∏è  Auto-deployment failed:', error);\n        throw new Error(`Required Python files missing: ${deployment.missing.join(', ')}`);\n      }\n    }\n  }\n} ","import * as fs from 'fs';\nimport * as path from 'path';\nimport { logger } from '@elizaos/core';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nexport class DeploymentService {\n  /**\n   * Deploy Python files from plugin to ElizaOS agent directory\n   */\n  static async deployPythonFiles(): Promise<void> {\n    try {\n      logger.info('üöÄ Deploying Python files to agent directory...');\n      \n      const agentDir = process.cwd(); // ElizaOS working directory\n      let pluginPyDir = path.join(__dirname, '..', '..', 'py');\n      const targetPyDir = path.join(agentDir, 'py');\n      \n      // Alternative path resolution if the standard method fails\n      if (!fs.existsSync(pluginPyDir)) {\n        const alternativePaths = [\n          // Try relative to current working directory\n          path.join(process.cwd(), '..', 'plugin-my-compchem-plugin-v2', 'py'),\n          // Try relative to agent directory\n          path.join(agentDir, '..', 'plugin-my-compchem-plugin-v2', 'py'),\n          // Try if we're in a plugins directory structure\n          path.join(agentDir, 'plugins', 'plugin-my-compchem-plugin-v2', 'py'),\n          // Try absolute path construction from __dirname\n          path.join(path.dirname(path.dirname(path.dirname(__dirname))), 'plugin-my-compchem-plugin-v2', 'py'),\n        ];\n        \n        for (const altPath of alternativePaths) {\n          if (fs.existsSync(altPath)) {\n            logger.info(`üîÑ Using alternative path: ${altPath}`);\n            pluginPyDir = altPath;\n            break;\n          }\n        }\n      }\n      \n      logger.info(`üìÅ Source directory: ${pluginPyDir}`);\n      logger.info(`üìÅ Target directory: ${targetPyDir}`);\n      \n      // Ensure target directory exists\n      if (!fs.existsSync(targetPyDir)) {\n        fs.mkdirSync(targetPyDir, { recursive: true });\n        logger.info(`üìÅ Created directory: ${targetPyDir}`);\n      }\n      \n      // Files to deploy\n      const filesToDeploy = [\n        'parse_gaussian_cclib.py',\n        'plot_gaussian_analysis.py',\n        '__init__.py'\n      ];\n      \n      for (const fileName of filesToDeploy) {\n        const sourcePath = path.join(pluginPyDir, fileName);\n        const targetPath = path.join(targetPyDir, fileName);\n        \n        if (fs.existsSync(sourcePath)) {\n          // Check if file needs updating\n          let shouldCopy = true;\n          if (fs.existsSync(targetPath)) {\n            const sourceStats = fs.statSync(sourcePath);\n            const targetStats = fs.statSync(targetPath);\n            shouldCopy = sourceStats.mtime > targetStats.mtime;\n          }\n          \n          if (shouldCopy) {\n            fs.copyFileSync(sourcePath, targetPath);\n            logger.info(`‚úÖ Deployed: ${fileName}`);\n          } else {\n            logger.info(`‚è≠Ô∏è  Skipped (up to date): ${fileName}`);\n          }\n        } else {\n          logger.warn(`‚ö†Ô∏è  Source file not found: ${sourcePath}`);\n        }\n      }\n      \n      // Deploy data files if they don't exist\n      await this.deployDataFiles();\n      \n      logger.info('üéâ Python files deployment complete!');\n      \n    } catch (error) {\n      logger.error('‚ùå Failed to deploy Python files:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Deploy example data files\n   */\n  static async deployDataFiles(): Promise<void> {\n    const agentDir = process.cwd();\n    let pluginDataDir = path.join(__dirname, '..', '..', 'data', 'examples');\n    const targetDataDir = path.join(agentDir, 'data', 'examples');\n    \n    // Alternative path resolution if the standard method fails\n    if (!fs.existsSync(pluginDataDir)) {\n      const alternativePaths = [\n        // Try relative to current working directory\n        path.join(process.cwd(), '..', 'plugin-my-compchem-plugin-v2', 'data', 'examples'),\n        // Try relative to agent directory\n        path.join(agentDir, '..', 'plugin-my-compchem-plugin-v2', 'data', 'examples'),\n        // Try if we're in a plugins directory structure\n        path.join(agentDir, 'plugins', 'plugin-my-compchem-plugin-v2', 'data', 'examples'),\n        // Try absolute path construction from __dirname\n        path.join(path.dirname(path.dirname(path.dirname(__dirname))), 'plugin-my-compchem-plugin-v2', 'data', 'examples'),\n      ];\n      \n      for (const altPath of alternativePaths) {\n        if (fs.existsSync(altPath)) {\n          logger.info(`üîÑ Using alternative data path: ${altPath}`);\n          pluginDataDir = altPath;\n          break;\n        }\n      }\n    }\n    \n    // Ensure target directory exists\n    if (!fs.existsSync(targetDataDir)) {\n      fs.mkdirSync(targetDataDir, { recursive: true });\n      logger.info(`üìÅ Created data directory: ${targetDataDir}`);\n    }\n    \n    // Check for example data files in plugin directory\n    if (fs.existsSync(pluginDataDir)) {\n      const dataFiles = fs.readdirSync(pluginDataDir).filter(f => f.endsWith('.log'));\n      \n      for (const fileName of dataFiles) {\n        const sourcePath = path.join(pluginDataDir, fileName);\n        const targetPath = path.join(targetDataDir, fileName);\n        \n        if (!fs.existsSync(targetPath)) {\n          fs.copyFileSync(sourcePath, targetPath);\n          logger.info(`‚úÖ Deployed data file: ${fileName}`);\n        }\n      }\n    }\n  }\n  \n  /**\n   * Check if Python files are properly deployed\n   */\n  static checkDeployment(): { deployed: boolean; missing: string[] } {\n    const agentDir = process.cwd();\n    const targetPyDir = path.join(agentDir, 'py');\n    \n    const requiredFiles = [\n      'parse_gaussian_cclib.py',\n      'plot_gaussian_analysis.py'\n    ];\n    \n    const missing: string[] = [];\n    \n    for (const fileName of requiredFiles) {\n      const filePath = path.join(targetPyDir, fileName);\n      if (!fs.existsSync(filePath)) {\n        missing.push(fileName);\n      }\n    }\n    \n    return {\n      deployed: missing.length === 0,\n      missing\n    };\n  }\n} ","import { IAgentRuntime, Service, logger } from \"@elizaos/core\";\nimport { promises as fs } from \"fs\";\nimport { watch } from \"fs\";\nimport * as path from \"path\";\nimport { PythonService } from \"./pythonService\";\n\nexport class AutoKnowledgeService extends Service {\n    static serviceType = 'auto-knowledge';\n    capabilityDescription = \"Automatically monitors data/examples directory and builds knowledge graph from Gaussian files\";\n    \n    private knowledgeGraphPath: string;\n    private watchedDirectory: string;\n    private processedFiles: Set<string> = new Set();\n    private isInitialized = false;\n    private fileWatcher: any = null;\n\n    constructor(runtime: IAgentRuntime) {\n        super(runtime);\n        this.knowledgeGraphPath = \"\";\n        this.watchedDirectory = \"\";\n    }\n\n    static async start(runtime: IAgentRuntime): Promise<AutoKnowledgeService> {\n        const service = new AutoKnowledgeService(runtime);\n        await service.initialize();\n        logger.info(\"üß† Auto Knowledge Service started - watching data/examples/ for Gaussian files\");\n        return service;\n    }\n\n    async initialize(): Promise<void> {\n        if (this.isInitialized) return;\n\n        // Set up paths (simpler than v2 approach)\n        this.knowledgeGraphPath = path.join(process.cwd(), \"data\", \"auto-knowledge-graph.ttl\");\n        this.watchedDirectory = path.join(process.cwd(), \"data\", \"examples\");\n\n        try {\n            // Ensure directories exist\n            await fs.mkdir(path.dirname(this.knowledgeGraphPath), { recursive: true });\n            await fs.mkdir(this.watchedDirectory, { recursive: true });\n            \n            // Load or create knowledge graph\n            await this.loadOrCreateKnowledgeGraph();\n            \n            // Process existing files\n            await this.scanExistingFiles();\n            \n            // Start watching for new files (like v1)\n            this.startFileWatcher();\n            \n            this.isInitialized = true;\n            logger.info(`üìä Auto knowledge graph: ${this.knowledgeGraphPath}`);\n            logger.info(`üëÄ Watching directory: ${this.watchedDirectory}`);\n        } catch (error) {\n            logger.error(\"‚ùå Failed to initialize Auto Knowledge Service:\", error);\n        }\n    }\n\n    static async stop(runtime: IAgentRuntime): Promise<void> {\n        const service = runtime.getService('auto-knowledge') as AutoKnowledgeService;\n        if (service) {\n            service.stopWatching();\n        }\n        logger.info('üß† Auto Knowledge Service stopped');\n    }\n\n    async stop(): Promise<void> {\n        this.stopWatching();\n    }\n\n    private stopWatching(): void {\n        if (this.fileWatcher) {\n            this.fileWatcher.close();\n            this.fileWatcher = null;\n        }\n    }\n\n    private async loadOrCreateKnowledgeGraph(): Promise<void> {\n        try {\n            const stats = await fs.stat(this.knowledgeGraphPath);\n            if (stats.isFile()) {\n                logger.info(\"üìñ Loading existing auto knowledge graph...\");\n                const content = await fs.readFile(this.knowledgeGraphPath, 'utf-8');\n                \n                // Extract processed files from comments\n                const fileMatches = content.match(/# File: (.+\\.log)/g);\n                if (fileMatches) {\n                    for (const match of fileMatches) {\n                        const filename = match.replace('# File: ', '');\n                        this.processedFiles.add(filename);\n                    }\n                }\n                logger.info(`üìä Found ${this.processedFiles.size} previously processed files`);\n            }\n        } catch (error) {\n            // Create new knowledge graph\n            logger.info(\"üÜï Creating new auto knowledge graph...\");\n            await this.createInitialKnowledgeGraph();\n        }\n    }\n\n    private async createInitialKnowledgeGraph(): Promise<void> {\n        const initialContent = `# Auto Knowledge Graph - ElizaOS Plugin v2\n# Created: ${new Date().toISOString()}\n# Files are automatically processed when added to data/examples/\n\n@prefix ex: <https://example.org/auto#> .\n@prefix ontocompchem: <http://www.theworldavatar.com/ontology/ontocompchem/> .\n@prefix cheminf: <http://semanticscience.org/resource/> .\n\n`;\n        await fs.writeFile(this.knowledgeGraphPath, initialContent, 'utf-8');\n        logger.info(\"‚úÖ Auto knowledge graph created\");\n    }\n\n    // Automatic file monitoring (like v1)\n    private async scanExistingFiles(): Promise<void> {\n        try {\n            const files = await fs.readdir(this.watchedDirectory);\n            const gaussianFiles = files.filter(file => \n                file.toLowerCase().endsWith('.log') || file.toLowerCase().endsWith('.out')\n            );\n\n            logger.info(`üîç Found ${gaussianFiles.length} existing Gaussian files`);\n\n            for (const file of gaussianFiles) {\n                const filePath = path.join(this.watchedDirectory, file);\n                if (!this.processedFiles.has(file)) {\n                    await this.processFileAutomatically(filePath);\n                }\n            }\n        } catch (error) {\n            logger.warn(\"‚ö†Ô∏è  Could not scan existing files:\", error.message);\n        }\n    }\n\n    private startFileWatcher(): void {\n        try {\n            this.fileWatcher = watch(this.watchedDirectory, { recursive: false }, async (eventType, filename) => {\n                if (!filename) return;\n                \n                // Only process Gaussian files\n                if (!filename.toLowerCase().endsWith('.log') && !filename.toLowerCase().endsWith('.out')) {\n                    return;\n                }\n\n                const filePath = path.join(this.watchedDirectory, filename);\n\n                if (eventType === 'rename' || eventType === 'change') {\n                    try {\n                        // Check if file exists and is accessible\n                        await fs.access(filePath);\n                        \n                        // Skip if already processed\n                        if (this.processedFiles.has(filename)) {\n                            return;\n                        }\n\n                        logger.info(`üÜï New Gaussian file detected: ${filename}`);\n                        await this.processFileAutomatically(filePath);\n                    } catch (error) {\n                        // File was deleted or inaccessible\n                        logger.debug(`File no longer accessible: ${filename}`);\n                    }\n                }\n            });\n            \n            logger.info(\"üëÄ File watcher started\");\n        } catch (error) {\n            logger.warn(\"‚ö†Ô∏è  Could not start file watcher:\", error.message);\n        }\n    }\n\n    private async processFileAutomatically(filePath: string): Promise<void> {\n        const filename = path.basename(filePath);\n        \n        try {\n            // Get Python service\n            const pythonService = this.runtime.getService<PythonService>('python-execution');\n            if (!pythonService) {\n                logger.warn(\"‚ö†Ô∏è  Python service not available, skipping file processing\");\n                return;\n            }\n\n            logger.info(`‚öôÔ∏è  Auto-processing: ${filename}`);\n\n            const metadata = {\n                filename,\n                timestamp: new Date().toISOString(),\n                source: \"auto-monitor\",\n                parser: \"cclib\"\n            };\n\n            // Parse file to RDF\n            logger.info(`üîç Calling Python service to parse ${filename}...`);\n            const rdfResult = await pythonService.parseGaussianFile(filePath, metadata, 'turtle');\n            \n            // Add detailed logging to see what we got back\n            logger.info(`üìù Python service returned:`, {\n                type: typeof rdfResult,\n                isString: typeof rdfResult === 'string',\n                hasError: rdfResult && typeof rdfResult === 'object' && 'error' in rdfResult,\n                length: typeof rdfResult === 'string' ? rdfResult.length : 'N/A',\n                preview: typeof rdfResult === 'string' ? rdfResult.substring(0, 100) + '...' : rdfResult\n            });\n            \n            // Handle both string and object results from Python service\n            let rdfContent: string | null = null;\n            let success = false;\n\n            if (typeof rdfResult === 'string') {\n                // Direct string result\n                rdfContent = rdfResult;\n                success = true;\n            } else if (rdfResult && typeof rdfResult === 'object') {\n                if (rdfResult.error) {\n                    logger.error(`‚ùå Python parsing error for ${filename}: ${rdfResult.error}`);\n                } else if (rdfResult.rdf && typeof rdfResult.rdf === 'string') {\n                    // Object with rdf property (turtle format)\n                    rdfContent = rdfResult.rdf;\n                    success = rdfResult.success !== false;\n                } else {\n                    logger.error(`‚ùå Unexpected object format for ${filename}:`, rdfResult);\n                }\n            } else {\n                logger.error(`‚ùå No result returned from Python service for ${filename}`);\n            }\n\n            if (success && rdfContent && rdfContent.trim().length > 0) {\n                // Add to knowledge graph\n                const header = `\\n# File: ${filename} (auto-processed ${new Date().toISOString()})\\n`;\n                const contentToAppend = header + rdfContent + '\\n';\n                \n                await fs.appendFile(this.knowledgeGraphPath, contentToAppend, 'utf-8');\n                \n                // Mark as processed\n                this.processedFiles.add(filename);\n                \n                const tripleCount = (rdfContent.match(/\\./g) || []).length;\n                logger.info(`‚úÖ Auto-added ${tripleCount} triples from ${filename}`);\n            } else {\n                logger.error(`‚ùå Could not parse ${filename}: Invalid or empty RDF content`);\n            }\n        } catch (error) {\n            logger.error(`‚ùå Error auto-processing ${filename}:`, {\n                message: error.message,\n                stack: error.stack,\n                name: error.name,\n                fullError: error\n            });\n        }\n    }\n\n    // Simple query method\n    async getStats(): Promise<any> {\n        try {\n            const content = await fs.readFile(this.knowledgeGraphPath, 'utf-8');\n            \n            return {\n                totalFiles: this.processedFiles.size,\n                filesList: Array.from(this.processedFiles),\n                molecules: (content.match(/ontocompchem:QuantumCalculation/g) || []).length,\n                scfEnergies: (content.match(/ontocompchem:SCFEnergy/g) || []).length,\n                atoms: (content.match(/cheminf:Atom/g) || []).length,\n                lastUpdate: new Date().toISOString(),\n                knowledgeGraphPath: this.knowledgeGraphPath,\n                watchedDirectory: this.watchedDirectory\n            };\n        } catch (error) {\n            return { error: error.message };\n        }\n    }\n\n    async searchKnowledgeGraph(query: string): Promise<any> {\n        try {\n            const content = await fs.readFile(this.knowledgeGraphPath, 'utf-8');\n            const lines = content.split('\\n');\n            \n            const results = lines\n                .filter(line => line.toLowerCase().includes(query.toLowerCase()))\n                .slice(0, 10);\n            \n            return {\n                query,\n                matches: results.length,\n                results\n            };\n        } catch (error) {\n            return { error: error.message };\n        }\n    }\n\n    isFileProcessed(filename: string): boolean {\n        return this.processedFiles.has(filename);\n    }\n} ","import type {\n  Action,\n  Content,\n  HandlerCallback,\n  IAgentRuntime,\n  Memory,\n  State,\n} from '@elizaos/core';\nimport { logger } from '@elizaos/core';\nimport { PythonService } from '../services/pythonService';\n\n/**\n * Action for analyzing molecular data using Python computational chemistry tools\n */\nexport const analyzeMolecularDataAction: Action = {\n  name: 'ANALYZE_MOLECULAR_DATA',\n  similes: ['ANALYZE_MOLECULE', 'MOLECULAR_ANALYSIS', 'COMPUTE_PROPERTIES'],\n  description: 'Analyzes molecular data and computes chemical properties using Python tools',\n\n  validate: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    _state: State | undefined\n  ): Promise<boolean> => {\n    // Check if this looks like a molecular analysis request\n    const text = message.content.text?.toLowerCase() || '';\n    \n    const molecularKeywords = [\n      'analyze molecule', 'molecular analysis', 'compute properties',\n      'molecular weight', 'stability', 'energy', 'chemical properties',\n      'molecular structure', 'atoms', 'bonds', 'homo lumo'\n    ];\n    \n    return molecularKeywords.some(keyword => text.includes(keyword));\n  },\n\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    _state: State | undefined,\n    _options: any,\n    callback?: HandlerCallback,\n    _responses?: Memory[]\n  ) => {\n    try {\n      logger.info('üß™ Analyzing molecular data...');\n\n      // Get Python service\n      const pythonService = runtime.getService<PythonService>('python-execution');\n      if (!pythonService) {\n        throw new Error('Python service not available');\n      }\n\n      // Check Python environment\n      const pythonEnv = await pythonService.checkPythonEnvironment();\n      if (!pythonEnv.pythonAvailable) {\n        const errorContent: Content = {\n          text: '‚ùå Python environment is not available. Please ensure Python 3 and required packages (numpy, matplotlib, scipy) are installed.',\n          actions: ['ANALYZE_MOLECULAR_DATA'],\n          source: message.content.source,\n        };\n        \n        if (callback) await callback(errorContent);\n        return errorContent;\n      }\n\n      // Extract molecular data from message or use example data\n      const molecularData = extractMolecularDataFromMessage(message) || {\n        formula: 'C6H6',\n        atoms: [\n          { id: 1, element: 'C', x: 0, y: 0, z: 0 },\n          { id: 2, element: 'C', x: 1.4, y: 0, z: 0 },\n          { id: 3, element: 'C', x: 2.1, y: 1.2, z: 0 },\n          { id: 4, element: 'C', x: 1.4, y: 2.4, z: 0 },\n          { id: 5, element: 'C', x: 0, y: 2.4, z: 0 },\n          { id: 6, element: 'C', x: -0.7, y: 1.2, z: 0 },\n          { id: 7, element: 'H', x: -0.5, y: -0.9, z: 0 },\n          { id: 8, element: 'H', x: 1.9, y: -0.9, z: 0 },\n          { id: 9, element: 'H', x: 3.2, y: 1.2, z: 0 },\n          { id: 10, element: 'H', x: 1.9, y: 3.3, z: 0 },\n          { id: 11, element: 'H', x: -0.5, y: 3.3, z: 0 },\n          { id: 12, element: 'H', x: -1.8, y: 1.2, z: 0 }\n        ],\n        bonds: [\n          { from: 1, to: 2 }, { from: 2, to: 3 }, { from: 3, to: 4 },\n          { from: 4, to: 5 }, { from: 5, to: 6 }, { from: 6, to: 1 },\n          { from: 1, to: 7 }, { from: 2, to: 8 }, { from: 3, to: 9 },\n          { from: 4, to: 10 }, { from: 5, to: 11 }, { from: 6, to: 12 }\n        ],\n        scf_energy: -231.5,\n        homo_lumo_gap: 5.2,\n        timestamp: new Date().toISOString()\n      };\n\n      // Perform molecular analysis\n      const analysisResult = await pythonService.analyzeMolecularData(molecularData, 'molecular');\n      \n      if (!analysisResult.success) {\n        throw new Error(analysisResult.error || 'Analysis failed');\n      }\n\n      // Perform energy analysis if energy data is available\n      let energyAnalysis = null;\n      if (molecularData.scf_energy || molecularData.homo_lumo_gap) {\n        energyAnalysis = await pythonService.analyzeMolecularData(molecularData, 'energy');\n      }\n\n      // Format the response\n      let responseText = `üß™ **Molecular Analysis Results**\\n\\n`;\n      responseText += `**Formula:** ${analysisResult.formula}\\n`;\n      responseText += `**Atom Count:** ${analysisResult.atom_count}\\n`;\n      responseText += `**Bond Count:** ${analysisResult.bond_count}\\n`;\n      responseText += `**Molecular Weight:** ${analysisResult.molecular_weight} g/mol\\n\\n`;\n\n      responseText += `**Computed Properties:**\\n`;\n      responseText += `‚Ä¢ Density Estimate: ${analysisResult.properties.density_estimate} g/cm¬≥\\n`;\n      responseText += `‚Ä¢ Complexity Score: ${analysisResult.properties.complexity_score}/100\\n`;\n      responseText += `‚Ä¢ Stability: ${analysisResult.properties.stability_estimate}\\n`;\n\n      if (energyAnalysis && energyAnalysis.success) {\n        responseText += `\\n**Energy Analysis:**\\n`;\n        if (energyAnalysis.scf_energy) {\n          responseText += `‚Ä¢ SCF Energy: ${energyAnalysis.scf_energy} hartree\\n`;\n          responseText += `‚Ä¢ Energy Classification: ${energyAnalysis.energy_classification}\\n`;\n        }\n        if (energyAnalysis.homo_lumo_gap) {\n          responseText += `‚Ä¢ HOMO-LUMO Gap: ${energyAnalysis.homo_lumo_gap} eV\\n`;\n          responseText += `‚Ä¢ Conductivity Prediction: ${energyAnalysis.conductivity_prediction}\\n`;\n        }\n      }\n\n      if (pythonEnv.packagesMissing.length > 0) {\n        responseText += `\\n**Note:** Some advanced features require additional Python packages: ${pythonEnv.packagesMissing.join(', ')}`;\n      }\n\n      const responseContent: Content = {\n        text: responseText,\n        actions: ['ANALYZE_MOLECULAR_DATA'],\n        source: message.content.source,\n      };\n\n      if (callback) await callback(responseContent);\n      return responseContent;\n\n    } catch (error) {\n      logger.error('Error in molecular data analysis:', error);\n      \n      const errorContent: Content = {\n        text: `‚ùå Failed to analyze molecular data: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        actions: ['ANALYZE_MOLECULAR_DATA'],\n        source: message.content.source,\n      };\n      \n      if (callback) await callback(errorContent);\n      return errorContent;\n    }\n  },\n\n  examples: [\n    [\n      {\n        name: '{{user1}}',\n        content: {\n          text: 'Can you analyze this molecular structure and compute its properties?',\n        },\n      },\n      {\n        name: '{{user2}}',\n        content: {\n          text: 'üß™ **Molecular Analysis Results**\\n\\n**Formula:** C6H6\\n**Atom Count:** 12\\n**Bond Count:** 12\\n**Molecular Weight:** 78.11 g/mol\\n\\n**Computed Properties:**\\n‚Ä¢ Density Estimate: 7.81 g/cm¬≥\\n‚Ä¢ Complexity Score: 24/100\\n‚Ä¢ Stability: stable',\n          actions: ['ANALYZE_MOLECULAR_DATA'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{user1}}',\n        content: {\n          text: 'What are the chemical properties of benzene?',\n        },\n      },\n      {\n        name: '{{user2}}',\n        content: {\n          text: 'üß™ **Molecular Analysis Results**\\n\\n**Formula:** C6H6\\n**Atom Count:** 12\\n**Bond Count:** 12\\n**Molecular Weight:** 78.11 g/mol\\n\\n**Computed Properties:**\\n‚Ä¢ Density Estimate: 7.81 g/cm¬≥\\n‚Ä¢ Complexity Score: 24/100\\n‚Ä¢ Stability: stable\\n\\n**Energy Analysis:**\\n‚Ä¢ SCF Energy: -231.5 hartree\\n‚Ä¢ Energy Classification: unstable\\n‚Ä¢ HOMO-LUMO Gap: 5.2 eV\\n‚Ä¢ Conductivity Prediction: insulator',\n          actions: ['ANALYZE_MOLECULAR_DATA'],\n        },\n      },\n    ],\n  ],\n};\n\n/**\n * Extract molecular data from the message content\n */\nfunction extractMolecularDataFromMessage(message: Memory): any | null {\n  const text = message.content.text;\n  if (!text) return null;\n\n  // Try to extract JSON molecular data from the message\n  try {\n    const jsonMatch = text.match(/\\{[\\s\\S]*\\}/);\n    if (jsonMatch) {\n      return JSON.parse(jsonMatch[0]);\n    }\n  } catch (error) {\n    // If JSON parsing fails, continue with other extraction methods\n  }\n\n  // Try to extract simple molecular formula\n  const formulaMatch = text.match(/([A-Z][a-z]?\\d*)+/);\n  if (formulaMatch) {\n    return {\n      formula: formulaMatch[0],\n      timestamp: new Date().toISOString()\n    };\n  }\n\n  return null;\n} ","import type {\n  Action,\n  Content,\n  HandlerCallback,\n  IAgentRuntime,\n  Memory,\n  State,\n} from '@elizaos/core';\nimport { logger } from '@elizaos/core';\nimport { PythonService } from '../services/pythonService';\n\n/**\n * Action for generating molecular visualizations using Python tools\n */\nexport const generateVisualizationAction: Action = {\n  name: 'GENERATE_MOLECULAR_VISUALIZATION',\n  similes: ['VISUALIZE_MOLECULE', 'PLOT_STRUCTURE', 'MOLECULAR_VIZ', 'SHOW_MOLECULE'],\n  description: 'Generates molecular visualizations and structure diagrams using Python visualization tools',\n\n  validate: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    _state: State | undefined\n  ): Promise<boolean> => {\n    // Check if this looks like a visualization request\n    const text = message.content.text?.toLowerCase() || '';\n    \n    const visualizationKeywords = [\n      'visualize', 'plot', 'show', 'display', 'diagram', 'structure',\n      'molecular visualization', 'molecular diagram', 'plot molecule',\n      'show structure', 'visualize structure', 'molecular plot'\n    ];\n    \n    const molecularKeywords = [\n      'molecule', 'molecular', 'chemical', 'structure', 'compound', 'atoms', 'bonds'\n    ];\n    \n    const hasVisualizationKeyword = visualizationKeywords.some(keyword => text.includes(keyword));\n    const hasMolecularKeyword = molecularKeywords.some(keyword => text.includes(keyword));\n    \n    return hasVisualizationKeyword && hasMolecularKeyword;\n  },\n\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    _state: State | undefined,\n    _options: any,\n    callback?: HandlerCallback,\n    _responses?: Memory[]\n  ) => {\n    try {\n      logger.info('üé® Generating molecular visualization...');\n\n      // Get Python service\n      const pythonService = runtime.getService<PythonService>('python-execution');\n      if (!pythonService) {\n        throw new Error('Python service not available');\n      }\n\n      // Check Python environment\n      const pythonEnv = await pythonService.checkPythonEnvironment();\n      if (!pythonEnv.pythonAvailable) {\n        const errorContent: Content = {\n          text: '‚ùå Python environment is not available. Please ensure Python 3 and required packages (numpy, matplotlib) are installed for visualizations.',\n          actions: ['GENERATE_MOLECULAR_VISUALIZATION'],\n          source: message.content.source,\n        };\n        \n        if (callback) await callback(errorContent);\n        return errorContent;\n      }\n\n      // Extract molecular data from message or use example data\n      const molecularData = extractMolecularDataFromMessage(message) || {\n        formula: 'C6H6',\n        name: 'Benzene',\n        atoms: [\n          { id: 1, element: 'C', x: 0, y: 0 },\n          { id: 2, element: 'C', x: 1.4, y: 0 },\n          { id: 3, element: 'C', x: 2.1, y: 1.2 },\n          { id: 4, element: 'C', x: 1.4, y: 2.4 },\n          { id: 5, element: 'C', x: 0, y: 2.4 },\n          { id: 6, element: 'C', x: -0.7, y: 1.2 },\n          { id: 7, element: 'H', x: -0.5, y: -0.9 },\n          { id: 8, element: 'H', x: 1.9, y: -0.9 },\n          { id: 9, element: 'H', x: 3.2, y: 1.2 },\n          { id: 10, element: 'H', x: 1.9, y: 3.3 },\n          { id: 11, element: 'H', x: -0.5, y: 3.3 },\n          { id: 12, element: 'H', x: -1.8, y: 1.2 }\n        ],\n        bonds: [\n          { from: 1, to: 2 }, { from: 2, to: 3 }, { from: 3, to: 4 },\n          { from: 4, to: 5 }, { from: 5, to: 6 }, { from: 6, to: 1 },\n          { from: 1, to: 7 }, { from: 2, to: 8 }, { from: 3, to: 9 },\n          { from: 4, to: 10 }, { from: 5, to: 11 }, { from: 6, to: 12 }\n        ]\n      };\n\n      // Generate visualization data\n      const visualizationResult = await pythonService.generateVisualization(molecularData);\n      \n      if (!visualizationResult.success && visualizationResult.error) {\n        throw new Error(visualizationResult.error);\n      }\n\n      // Format the response with ASCII art representation\n      let responseText = `üé® **Molecular Visualization Generated**\\n\\n`;\n      responseText += `**Molecule:** ${molecularData.formula} ${molecularData.name ? `(${molecularData.name})` : ''}\\n`;\n      responseText += `**Structure:**\\n\\n`;\n\n      // Generate a simple ASCII representation\n      if (visualizationResult.atoms && visualizationResult.atoms.length > 0) {\n        responseText += generateASCIIStructure(visualizationResult);\n        responseText += `\\n\\n**Atoms:** ${visualizationResult.atoms.length}\\n`;\n        responseText += `**Bonds:** ${molecularData.bonds ? molecularData.bonds.length : 0}\\n\\n`;\n\n        // Show atom details\n        responseText += `**Atom Details:**\\n`;\n        const elementCounts: { [key: string]: number } = {};\n        visualizationResult.atoms.forEach((atom: any) => {\n          elementCounts[atom.element] = (elementCounts[atom.element] || 0) + 1;\n        });\n        \n        Object.entries(elementCounts).forEach(([element, count]) => {\n          responseText += `‚Ä¢ ${element}: ${count}\\n`;\n        });\n\n        // Show coordinate information\n        responseText += `\\n**Coordinate System:** 2D Layout\\n`;\n        const bounds = calculateBounds(visualizationResult.atoms);\n        responseText += `‚Ä¢ X range: ${bounds.minX.toFixed(2)} to ${bounds.maxX.toFixed(2)}\\n`;\n        responseText += `‚Ä¢ Y range: ${bounds.minY.toFixed(2)} to ${bounds.maxY.toFixed(2)}\\n`;\n      }\n\n      if (pythonEnv.packagesMissing.includes('matplotlib')) {\n        responseText += `\\n**Note:** Install matplotlib for enhanced graphical visualizations: \\`pip install matplotlib\\``;\n      }\n\n      const responseContent: Content = {\n        text: responseText,\n        actions: ['GENERATE_MOLECULAR_VISUALIZATION'],\n        source: message.content.source,\n      };\n\n      if (callback) await callback(responseContent);\n      return responseContent;\n\n    } catch (error) {\n      logger.error('Error in molecular visualization:', error);\n      \n      const errorContent: Content = {\n        text: `‚ùå Failed to generate molecular visualization: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        actions: ['GENERATE_MOLECULAR_VISUALIZATION'],\n        source: message.content.source,\n      };\n      \n      if (callback) await callback(errorContent);\n      return errorContent;\n    }\n  },\n\n  examples: [\n    [\n      {\n        name: '{{user1}}',\n        content: {\n          text: 'Can you visualize the molecular structure of benzene?',\n        },\n      },\n      {\n        name: '{{user2}}',\n        content: {\n          text: 'üé® **Molecular Visualization Generated**\\n\\n**Molecule:** C6H6 (Benzene)\\n**Structure:**\\n\\n```\\n    H\\n    |\\nH-C=C-H\\n |   |\\nH-C=C-H\\n    |\\n    H\\n```\\n\\n**Atoms:** 12\\n**Bonds:** 12\\n\\n**Atom Details:**\\n‚Ä¢ C: 6\\n‚Ä¢ H: 6',\n          actions: ['GENERATE_MOLECULAR_VISUALIZATION'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{user1}}',\n        content: {\n          text: 'Show me a diagram of this molecule',\n        },\n      },\n      {\n        name: '{{user2}}',\n        content: {\n          text: 'üé® **Molecular Visualization Generated**\\n\\n**Molecule:** C6H6\\n**Structure:**\\n\\n```\\n       C\\n     /   \\\\\\n   C       C\\n   |       |\\n   C       C\\n     \\\\   /\\n       C\\n```\\n\\n**Atoms:** 12\\n**Bonds:** 12\\n\\n**Coordinate System:** 2D Layout\\n‚Ä¢ X range: -1.80 to 3.20\\n‚Ä¢ Y range: -0.90 to 3.30',\n          actions: ['GENERATE_MOLECULAR_VISUALIZATION'],\n        },\n      },\n    ],\n  ],\n};\n\n/**\n * Extract molecular data from the message content\n */\nfunction extractMolecularDataFromMessage(message: Memory): any | null {\n  const text = message.content.text;\n  if (!text) return null;\n\n  // Try to extract JSON molecular data from the message\n  try {\n    const jsonMatch = text.match(/\\{[\\s\\S]*\\}/);\n    if (jsonMatch) {\n      return JSON.parse(jsonMatch[0]);\n    }\n  } catch (error) {\n    // If JSON parsing fails, continue with other extraction methods\n  }\n\n  // Try to extract simple molecular formula\n  const formulaMatch = text.match(/([A-Z][a-z]?\\d*)+/);\n  if (formulaMatch) {\n    return {\n      formula: formulaMatch[0],\n      timestamp: new Date().toISOString()\n    };\n  }\n\n  return null;\n}\n\n/**\n * Generate a simple ASCII representation of the molecular structure\n */\nfunction generateASCIIStructure(visualizationData: any): string {\n  if (!visualizationData.atoms || visualizationData.atoms.length === 0) {\n    return '```\\nNo structure data available\\n```';\n  }\n\n  // For now, return a simple representation\n  // In a full implementation, this would generate actual ASCII art based on coordinates\n  const atomCount = visualizationData.atoms.length;\n  const elements = visualizationData.atoms.map((atom: any) => atom.element);\n  const uniqueElements = [...new Set(elements)];\n\n  let ascii = '```\\n';\n  if (atomCount <= 20) {\n    // Simple linear representation for small molecules\n    ascii += visualizationData.atoms.map((atom: any, index: number) => {\n      const symbol = atom.element;\n      const position = `(${atom.x?.toFixed(1) || '0'}, ${atom.y?.toFixed(1) || '0'})`;\n      return `${symbol}${index + 1} ${position}`;\n    }).join(' - ');\n  } else {\n    // Summary for larger molecules\n    ascii += `Large molecule with ${atomCount} atoms:\\n`;\n    uniqueElements.forEach(element => {\n      const count = elements.filter((e: string) => e === element).length;\n      ascii += `${element}: ${count} atoms\\n`;\n    });\n  }\n  ascii += '\\n```';\n\n  return ascii;\n}\n\n/**\n * Calculate bounds of the molecular structure\n */\nfunction calculateBounds(atoms: any[]): { minX: number; maxX: number; minY: number; maxY: number } {\n  if (!atoms || atoms.length === 0) {\n    return { minX: 0, maxX: 0, minY: 0, maxY: 0 };\n  }\n\n  let minX = atoms[0].x || 0;\n  let maxX = atoms[0].x || 0;\n  let minY = atoms[0].y || 0;\n  let maxY = atoms[0].y || 0;\n\n  atoms.forEach(atom => {\n    const x = atom.x || 0;\n    const y = atom.y || 0;\n    minX = Math.min(minX, x);\n    maxX = Math.max(maxX, x);\n    minY = Math.min(minY, y);\n    maxY = Math.max(maxY, y);\n  });\n\n  return { minX, maxX, minY, maxY };\n} ","import type {\n  Action,\n  Content,\n  HandlerCallback,\n  IAgentRuntime,\n  Memory,\n  State,\n} from '@elizaos/core';\nimport { logger } from '@elizaos/core';\nimport { PythonService } from '../services/pythonService';\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport { fileURLToPath } from 'url';\n\n// ES modules equivalent of __dirname\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n/**\n * Action for parsing Gaussian log files using cclib\n */\nexport const parseGaussianFileAction: Action = {\n  name: 'PARSE_GAUSSIAN_FILE',\n  similes: ['PARSE_GAUSSIAN', 'ANALYZE_GAUSSIAN_LOG', 'READ_GAUSSIAN_FILE'],\n  description: 'Parses Gaussian computational chemistry log files using cclib to extract molecular properties and energies',\n\n  validate: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    _state: State | undefined\n  ): Promise<boolean> => {\n    // Check if this looks like a Gaussian file parsing request\n    const text = message.content.text?.toLowerCase() || '';\n    \n    const gaussianKeywords = [\n      'parse gaussian', 'gaussian log', 'gaussian file', '.log', '.out',\n      'scf energy', 'computational chemistry', 'quantum chemistry',\n      'parse log file', 'gaussian output', 'cclib', 'analyze calculation'\n    ];\n    \n    return gaussianKeywords.some(keyword => text.includes(keyword));\n  },\n\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    _state: State | undefined,\n    _options: any,\n    callback?: HandlerCallback,\n    _responses?: Memory[]\n  ) => {\n    try {\n      logger.info('üß¨ Parsing Gaussian file...');\n\n      // Get Python service\n      const pythonService = runtime.getService<PythonService>('python-execution');\n      if (!pythonService) {\n        throw new Error('Python service not available');\n      }\n\n      // Check Python environment\n      const pythonEnv = await pythonService.checkPythonEnvironment();\n      if (!pythonEnv.pythonAvailable) {\n        const errorContent: Content = {\n          text: '‚ùå Python environment is not available. Please install Python 3 and required packages.',\n          actions: ['PARSE_GAUSSIAN_FILE'],\n          source: message.content.source,\n        };\n        \n        if (callback) await callback(errorContent);\n        return errorContent;\n      }\n\n      if (!pythonEnv.cclibAvailable) {\n        const errorContent: Content = {\n          text: '‚ùå cclib is required for Gaussian file parsing. Please install it with: `pip install cclib`',\n          actions: ['PARSE_GAUSSIAN_FILE'],\n          source: message.content.source,\n        };\n        \n        if (callback) await callback(errorContent);\n        return errorContent;\n      }\n\n      // Extract file path from message or use example files\n      logger.info(`üîç Attempting to extract file path from message: \"${message.content.text}\"`);\n      const extractedPath = extractFilePathFromMessage(message);\n      logger.info(`üìù Extracted path result: ${extractedPath}`);\n      \n      let filePath = extractedPath;\n      if (!filePath) {\n        logger.info('üîç No file path extracted from message, looking for example files...');\n        filePath = findExampleLogFile();\n        logger.info(`üìÅ Example file search result: ${filePath}`);\n      }\n      \n      if (!filePath) {\n        const currentDir = process.cwd();\n        logger.error(`‚ùå No file found. CWD: ${currentDir}, __dirname: ${__dirname}`);\n        \n        // Let's check what's actually in the directories\n        const testDir = path.join(currentDir, 'data', 'examples');\n        try {\n          const files = require('fs').readdirSync(testDir);\n          logger.info(`üìÇ Files in ${testDir}: ${files.join(', ')}`);\n        } catch (error) {\n          logger.error(`‚ùå Cannot read directory ${testDir}: ${error.message}`);\n        }\n        \n        const errorContent: Content = {\n          text: `‚ùå No Gaussian log file specified. Please provide a file path or add log files to the data/examples/ directory.\\n\\nüîç **Current working directory:** ${currentDir}\\n\\nüìÅ **Looking for files in:**\\n‚Ä¢ ${path.join(currentDir, 'data', 'examples')}\\n‚Ä¢ ./data/examples/\\n‚Ä¢ Plugin directory data/examples/\\n\\nüí° **Example usage:** \"Parse the lactone.log file\" or \"Analyze TolueneEnergy.log\"`,\n          actions: ['PARSE_GAUSSIAN_FILE'],\n          source: message.content.source,\n        };\n        \n        if (callback) await callback(errorContent);\n        return errorContent;\n      }\n\n      // Parse the Gaussian file\n      const metadata = {\n        user_request: message.content.text,\n        timestamp: new Date().toISOString(),\n        source: 'eliza_agent'\n      };\n\n      // Parse the Gaussian file\n      const parseResult = await pythonService.parseGaussianFile(filePath, metadata, 'json');\n      \n      if (parseResult.error) {\n        throw new Error(parseResult.error);\n      }\n\n      // Format the response\n      let responseText = `üß¨ **Gaussian File Analysis Complete**\\n\\n`;\n      responseText += `**File:** ${path.basename(filePath)}\\n`;\n      \n      if (parseResult.metadata) {\n        responseText += `**Parser:** cclib v${parseResult.metadata.cclib_version}\\n`;\n        responseText += `**Parsed:** ${new Date(parseResult.metadata.parsed_at).toLocaleString()}\\n\\n`;\n      }\n\n      // Basic molecular information\n      if (parseResult.molecular_formula) {\n        responseText += `**Molecular Formula:** ${parseResult.molecular_formula}\\n`;\n      }\n      if (parseResult.natom) {\n        responseText += `**Number of Atoms:** ${parseResult.natom}\\n`;\n      }\n      if (parseResult.charge !== undefined) {\n        responseText += `**Charge:** ${parseResult.charge}\\n`;\n      }\n      if (parseResult.mult) {\n        responseText += `**Multiplicity:** ${parseResult.mult}\\n`;\n      }\n\n      // Energy information\n      if (parseResult.scfenergies && parseResult.scfenergies.length > 0) {\n        responseText += `\\n**Energies:**\\n`;\n        const finalEnergy = parseResult.scfenergies[parseResult.scfenergies.length - 1];\n        const finalEnergyHartree = finalEnergy / 27.211;\n        responseText += `‚Ä¢ Final SCF Energy: ${finalEnergy.toFixed(6)} eV (${finalEnergyHartree.toFixed(8)} hartree)\\n`;\n        \n        if (parseResult.scfenergies.length > 1) {\n          responseText += `‚Ä¢ Total SCF Cycles: ${parseResult.scfenergies.length}\\n`;\n        }\n      }\n\n      // HOMO-LUMO gap\n      if (parseResult.homo_lumo_gaps && parseResult.homo_lumo_gaps.length > 0) {\n        const gap = parseResult.homo_lumo_gaps[0];\n        responseText += `‚Ä¢ HOMO-LUMO Gap: ${gap.gap_ev.toFixed(3)} eV\\n`;\n        responseText += `‚Ä¢ HOMO Energy: ${gap.homo_energy_ev.toFixed(3)} eV\\n`;\n        responseText += `‚Ä¢ LUMO Energy: ${gap.lumo_energy_ev.toFixed(3)} eV\\n`;\n      }\n\n      // Vibrational frequencies\n      if (parseResult.vibfreqs && parseResult.vibfreqs.length > 0) {\n        responseText += `\\n**Vibrational Analysis:**\\n`;\n        responseText += `‚Ä¢ Number of Frequencies: ${parseResult.vibfreqs.length}\\n`;\n        \n        // Show first few frequencies\n        const freqsToShow = parseResult.vibfreqs.slice(0, 5);\n        responseText += `‚Ä¢ Frequencies (cm‚Åª¬π): ${freqsToShow.map((f: number) => f.toFixed(1)).join(', ')}`;\n        if (parseResult.vibfreqs.length > 5) {\n          responseText += ` ... (${parseResult.vibfreqs.length - 5} more)`;\n        }\n        responseText += `\\n`;\n      }\n\n      // Thermochemistry if available\n      if (parseResult.enthalpy || parseResult.entropy || parseResult.freeenergy) {\n        responseText += `\\n**Thermochemistry:**\\n`;\n        if (parseResult.enthalpy) {\n          responseText += `‚Ä¢ Enthalpy: ${parseResult.enthalpy.toFixed(6)} hartree\\n`;\n        }\n        if (parseResult.entropy) {\n          responseText += `‚Ä¢ Entropy: ${parseResult.entropy.toFixed(6)} cal/(mol¬∑K)\\n`;\n        }\n        if (parseResult.freeenergy) {\n          responseText += `‚Ä¢ Free Energy: ${parseResult.freeenergy.toFixed(6)} hartree\\n`;\n        }\n        if (parseResult.zpve) {\n          responseText += `‚Ä¢ Zero-Point Vibrational Energy: ${parseResult.zpve.toFixed(6)} hartree\\n`;\n        }\n      }\n\n      // Geometry information\n      if (parseResult.final_geometry) {\n        responseText += `\\n**Final Geometry:** ${parseResult.final_geometry.length} atoms with optimized coordinates\\n`;\n      }\n\n      // Data summary\n      const availableProperties = Object.keys(parseResult).filter(key => \n        !['metadata', 'error'].includes(key) && parseResult[key] != null\n      );\n      responseText += `\\n**Available Data:** ${availableProperties.length} properties extracted\\n`;\n      responseText += `Properties: ${availableProperties.slice(0, 8).join(', ')}`;\n      if (availableProperties.length > 8) {\n        responseText += ` ... (${availableProperties.length - 8} more)`;\n      }\n\n      // Auto knowledge graph info\n      responseText += `\\n\\nüß† **Auto Knowledge Graph:** Files in \\`data/examples/\\` are automatically processed into a persistent knowledge base`;\n      responseText += `\\nüí° *Try: \"Show knowledge stats\" to see the auto-built knowledge base*`;\n\n      const responseContent: Content = {\n        text: responseText,\n        actions: ['PARSE_GAUSSIAN_FILE'],\n        source: message.content.source,\n      };\n\n      if (callback) await callback(responseContent);\n      return responseContent;\n\n    } catch (error) {\n      logger.error('Error in Gaussian file parsing:', error);\n      \n      const errorContent: Content = {\n        text: `‚ùå Failed to parse Gaussian file: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        actions: ['PARSE_GAUSSIAN_FILE'],\n        source: message.content.source,\n      };\n      \n      if (callback) await callback(errorContent);\n      return errorContent;\n    }\n  },\n\n  examples: [\n    [\n      {\n        name: '{{user1}}',\n        content: {\n          text: 'Can you parse the lactone.log Gaussian file?',\n        },\n      },\n      {\n        name: '{{user2}}',\n        content: {\n          text: 'üß¨ **Gaussian File Analysis Complete**\\n\\n**File:** lactone.log\\n**Parser:** cclib v1.8.1\\n\\n**Molecular Formula:** C3H4O2\\n**Number of Atoms:** 9\\n**Charge:** 0\\n**Multiplicity:** 1\\n\\n**Energies:**\\n‚Ä¢ Final SCF Energy: -6202.856269 eV (-227.856269 hartree)\\n‚Ä¢ HOMO-LUMO Gap: 8.245 eV\\n\\n**Available Data:** 15 properties extracted',\n          actions: ['PARSE_GAUSSIAN_FILE'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{user1}}',\n        content: {\n          text: 'Analyze the TolueneEnergy.log computational chemistry file',\n        },\n      },\n      {\n        name: '{{user2}}',\n        content: {\n          text: 'üß¨ **Gaussian File Analysis Complete**\\n\\n**File:** TolueneEnergy.log\\n**Parser:** cclib v1.8.1\\n\\n**Molecular Formula:** C7H8\\n**Number of Atoms:** 15\\n**Charge:** 0\\n**Multiplicity:** 1\\n\\n**Energies:**\\n‚Ä¢ Final SCF Energy: -7384.636042 eV (-271.636042 hartree)\\n‚Ä¢ Total SCF Cycles: 5\\n\\n**Available Data:** 12 properties extracted',\n          actions: ['PARSE_GAUSSIAN_FILE'],\n        },\n      },\n    ],\n  ],\n};\n\n/**\n * Extract file path from the message content\n */\nfunction extractFilePathFromMessage(message: Memory): string | null {\n  const text = message.content.text;\n  logger.info(`üîç extractFilePathFromMessage: text = \"${text}\"`);\n  if (!text) return null;\n\n  // Look for file path patterns\n  const filePatterns = [\n    /(?:file:|path:)?\\s*([^\\s]+\\.(?:log|out))/gi,\n    /([^\\s]*lactone\\.log)/gi,\n    /([^\\s]*TolueneEnergy\\.log)/gi,\n    /([^\\s]*\\.(?:log|out))/gi\n  ];\n\n  for (let i = 0; i < filePatterns.length; i++) {\n    const pattern = filePatterns[i];\n    const match = text.match(pattern);\n    logger.info(`üîç Pattern ${i + 1}: ${pattern} -> match: ${match ? match[0] : 'none'}`);\n    \n    if (match) {\n      let filePath = match[1] || match[0];\n      \n      // Clean up the path\n      filePath = filePath.replace(/^(file:|path:)/i, '').trim();\n      logger.info(`üìù Cleaned filename: \"${filePath}\"`);\n      \n      // If it's just a filename, try to find it in various locations\n      if (!filePath.includes('/') && !filePath.includes('\\\\')) {\n        const possibleDataDirs = [\n          path.join(process.cwd(), 'data', 'examples'),\n          path.join(__dirname, '..', '..', 'data', 'examples'),\n          path.join(__dirname, '..', '..', '..', 'data', 'examples'),\n          path.join(process.cwd(), 'plugins', 'my-compchem-plugin-v2', 'data', 'examples'),\n          './data/examples'\n        ];\n\n        for (const dataDir of possibleDataDirs) {\n          const fullPath = path.join(dataDir, filePath);\n          try {\n            fs.accessSync(fullPath, fs.constants.F_OK);\n            logger.info(`‚úÖ Found file: ${fullPath}`);\n            return fullPath;\n          } catch {\n            logger.debug(`‚ùå Not found: ${fullPath}`);\n          }\n        }\n        \n        // If not found, return the default path\n        const defaultPath = path.join(process.cwd(), 'data', 'examples', filePath);\n        logger.info(`üîÑ Returning default path: ${defaultPath}`);\n        return defaultPath;\n      }\n      \n      return filePath;\n    }\n  }\n\n  logger.info('‚ùå No file path patterns matched');\n  return null;\n}\n\n/**\n * Find an example log file to use for demonstration\n */\nfunction findExampleLogFile(): string | null {\n  // Try multiple possible locations for the data files\n  const possibleDataDirs = [\n    // Current working directory\n    path.join(process.cwd(), 'data', 'examples'),\n    // Plugin directory (if running from plugin root)\n    path.join(__dirname, '..', '..', 'data', 'examples'),\n    // Relative to dist directory (if running from built plugin)\n    path.join(__dirname, '..', '..', '..', 'data', 'examples'),\n    // ElizaOS plugin directory structure\n    path.join(process.cwd(), 'plugins', 'my-compchem-plugin-v2', 'data', 'examples'),\n    // Direct relative path\n    './data/examples'\n  ];\n\n  const exampleFiles = ['lactone.log', 'TolueneEnergy.log'];\n\n  // Try each directory with each file\n  for (const dataDir of possibleDataDirs) {\n    for (const filename of exampleFiles) {\n      const filePath = path.join(dataDir, filename);\n      try {\n        // Use proper ES modules fs import\n        fs.accessSync(filePath, fs.constants.F_OK);\n        logger.info(`‚úÖ Found example file: ${filePath}`);\n        return filePath;\n      } catch (error) {\n        // File doesn't exist, continue\n        logger.debug(`‚ùå File not found: ${filePath}`);\n      }\n    }\n  }\n\n  logger.warn('‚ùå No example log files found in any location');\n  return null;\n} ","import type {\n  Action,\n  Content,\n  HandlerCallback,\n  IAgentRuntime,\n  Memory,\n  State,\n} from '@elizaos/core';\nimport { logger } from '@elizaos/core';\nimport { PythonService } from '../services/pythonService';\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport { fileURLToPath } from 'url';\n\n// ES modules equivalent of __dirname\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n/**\n * Diagnostic action to help debug path and environment issues\n */\nexport const diagnosticsAction: Action = {\n  name: 'COMPCHEM_DIAGNOSTICS',\n  similes: ['DIAGNOSTICS', 'DEBUG_PATHS', 'CHECK_ENVIRONMENT', 'TROUBLESHOOT'],\n  description: 'Runs diagnostic checks for the computational chemistry plugin to help debug path and environment issues',\n\n  validate: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    _state: State | undefined\n  ): Promise<boolean> => {\n    const text = message.content.text?.toLowerCase() || '';\n    \n    const diagnosticKeywords = [\n      'diagnostic', 'debug', 'troubleshoot', 'check environment',\n      'path issues', 'file not found', 'python not working'\n    ];\n    \n    return diagnosticKeywords.some(keyword => text.includes(keyword));\n  },\n\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    _state: State | undefined,\n    _options: any,\n    callback?: HandlerCallback,\n    _responses?: Memory[]\n  ) => {\n    try {\n      logger.info('üîç Running computational chemistry diagnostics...');\n\n      let responseText = 'üîç **Computational Chemistry Plugin Diagnostics**\\n\\n';\n\n      // 1. Current working directory\n      const currentDir = process.cwd();\n      responseText += `üìÅ **Current Working Directory:**\\n\\`${currentDir}\\`\\n\\n`;\n\n      // 2. Check for data files\n      responseText += 'üìä **Data Files Check:**\\n';\n      const possibleDataDirs = [\n        path.join(currentDir, 'data', 'examples'),\n        path.join(__dirname, '..', '..', 'data', 'examples'),\n        path.join(__dirname, '..', '..', '..', 'data', 'examples'),\n        path.join(currentDir, 'plugins', 'my-compchem-plugin-v2', 'data', 'examples'),\n        './data/examples'\n      ];\n\n      const dataFiles = ['lactone.log', 'TolueneEnergy.log'];\n      let foundDataFiles = false;\n\n      for (const dataDir of possibleDataDirs) {\n        for (const filename of dataFiles) {\n          const filePath = path.join(dataDir, filename);\n          try {\n            fs.accessSync(filePath);\n            responseText += `  ‚úÖ Found: \\`${filePath}\\`\\n`;\n            foundDataFiles = true;\n          } catch {\n            responseText += `  ‚ùå Missing: \\`${filePath}\\`\\n`;\n          }\n        }\n      }\n\n      if (!foundDataFiles) {\n        responseText += '\\n‚ö†Ô∏è  **No data files found!** Please ensure log files are in the data/examples/ directory.\\n';\n      }\n\n      // 3. Check for Python scripts\n      responseText += '\\nüêç **Python Scripts Check:**\\n';\n      const scriptNames = ['parse_gaussian_cclib.py', 'molecular_analyzer.py', 'plot_gaussian_analysis.py'];\n      const possibleScriptDirs = [\n        path.join(currentDir, 'py'),\n        path.join(__dirname, '..', '..', 'py'),\n        path.join(__dirname, '..', '..', '..', 'py'),\n        path.join(currentDir, 'plugins', 'my-compchem-plugin-v2', 'py'),\n        './py'\n      ];\n\n      let foundScripts = false;\n      for (const scriptDir of possibleScriptDirs) {\n        for (const scriptName of scriptNames) {\n          const scriptPath = path.join(scriptDir, scriptName);\n          try {\n            fs.accessSync(scriptPath);\n            responseText += `  ‚úÖ Found: \\`${scriptPath}\\`\\n`;\n            foundScripts = true;\n          } catch {\n            responseText += `  ‚ùå Missing: \\`${scriptPath}\\`\\n`;\n          }\n        }\n      }\n\n      if (!foundScripts) {\n        responseText += '\\n‚ö†Ô∏è  **No Python scripts found!** Please ensure scripts are in the py/ directory.\\n';\n      }\n\n      // 4. Python environment check\n      responseText += '\\nüêç **Python Environment:**\\n';\n      const pythonService = runtime.getService<PythonService>('python-execution');\n      if (pythonService) {\n        try {\n          const pythonEnv = await pythonService.checkPythonEnvironment();\n          if (pythonEnv.pythonAvailable) {\n            responseText += `  ‚úÖ Python: ${pythonEnv.pythonVersion}\\n`;\n            if (pythonEnv.cclibAvailable) {\n              responseText += `  ‚úÖ cclib: Available\\n`;\n            } else {\n              responseText += `  ‚ùå cclib: Missing (install with: pip install cclib)\\n`;\n            }\n            \n            responseText += `  üì¶ **Available packages:** ${pythonEnv.packagesAvailable.join(', ')}\\n`;\n            if (pythonEnv.packagesMissing.length > 0) {\n              responseText += `  üì¶ **Missing packages:** ${pythonEnv.packagesMissing.join(', ')}\\n`;\n            }\n          } else {\n            responseText += `  ‚ùå Python: Not available\\n`;\n          }\n        } catch (error) {\n          responseText += `  ‚ùå Python check failed: ${error instanceof Error ? error.message : 'Unknown error'}\\n`;\n        }\n      } else {\n        responseText += `  ‚ùå PythonService: Not available\\n`;\n      }\n\n      // 5. Runtime settings\n      responseText += '\\n‚öôÔ∏è  **Runtime Settings:**\\n';\n      const pythonPath = runtime.getSetting('PYTHON_PATH');\n      const pythonDebug = runtime.getSetting('PYTHON_DEBUG');\n      const dataDir = runtime.getSetting('COMPCHEM_DATA_DIR');\n\n      responseText += `  ‚Ä¢ PYTHON_PATH: ${pythonPath || 'Not set (default: python3)'}\\n`;\n      responseText += `  ‚Ä¢ PYTHON_DEBUG: ${pythonDebug || 'Not set (default: false)'}\\n`;\n      responseText += `  ‚Ä¢ COMPCHEM_DATA_DIR: ${dataDir || 'Not set (default: ./data)'}\\n`;\n\n      // 6. Plugin info\n      responseText += '\\nüîå **Plugin Info:**\\n';\n      responseText += `  ‚Ä¢ __dirname: \\`${__dirname}\\`\\n`;\n      responseText += `  ‚Ä¢ Plugin Name: my-compchem-plugin-v2\\n`;\n      responseText += `  ‚Ä¢ Services: PythonService, CompchemService\\n`;\n      responseText += `  ‚Ä¢ Actions: PARSE_GAUSSIAN_FILE, ANALYZE_MOLECULAR_DATA, GENERATE_MOLECULAR_VISUALIZATION\\n`;\n\n      // 7. Recommendations\n      responseText += '\\nüí° **Recommendations:**\\n';\n      if (!foundDataFiles) {\n        responseText += `  ‚Ä¢ Copy log files to: \\`${path.join(currentDir, 'data', 'examples')}\\`\\n`;\n      }\n      if (!foundScripts) {\n        responseText += `  ‚Ä¢ Copy Python scripts to: \\`${path.join(currentDir, 'py')}\\`\\n`;\n      }\n      responseText += `  ‚Ä¢ Try: \"Parse the lactone.log file\"\\n`;\n      responseText += `  ‚Ä¢ Try: \"Analyze molecule C6H6\"\\n`;\n\n      const responseContent: Content = {\n        text: responseText,\n        actions: ['COMPCHEM_DIAGNOSTICS'],\n        source: message.content.source,\n      };\n\n      if (callback) await callback(responseContent);\n      return responseContent;\n\n    } catch (error) {\n      logger.error('Error in diagnostics:', error);\n      \n      const errorContent: Content = {\n        text: `‚ùå Diagnostics failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        actions: ['COMPCHEM_DIAGNOSTICS'],\n        source: message.content.source,\n      };\n      \n      if (callback) await callback(errorContent);\n      return errorContent;\n    }\n  },\n\n  examples: [\n    [\n      {\n        name: '{{user1}}',\n        content: {\n          text: 'Run diagnostics to check if everything is working',\n        },\n      },\n      {\n        name: '{{user2}}',\n        content: {\n          text: 'üîç **Computational Chemistry Plugin Diagnostics**\\n\\nüìÅ **Current Working Directory:** `/path/to/workspace`\\n\\nüìä **Data Files Check:**\\n  ‚úÖ Found: `/path/to/data/examples/lactone.log`\\n  ‚úÖ Found: `/path/to/data/examples/TolueneEnergy.log`\\n\\nüêç **Python Environment:**\\n  ‚úÖ Python: Python 3.9.0\\n  ‚úÖ cclib: Available\\n\\nüí° All systems operational!',\n          actions: ['COMPCHEM_DIAGNOSTICS'],\n        },\n      },\n    ],\n  ],\n}; ","import {\n  type Action,\n  type Content,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  type State,\n  logger,\n} from '@elizaos/core';\nimport { AutoKnowledgeService } from '../services/autoKnowledgeService';\n\nexport const autoKnowledgeAction: Action = {\n  name: 'AUTO_KNOWLEDGE_STATS',\n  similes: [\n    'KNOWLEDGE_STATS',\n    'AUTO_STATS',\n    'SHOW_KNOWLEDGE',\n    'KNOWLEDGE_BASE',\n    'HOW_MANY_MOLECULES'\n  ],\n  description: 'Show statistics from the automatic knowledge graph that builds from files in data/examples/',\n\n  validate: async (\n    _runtime: IAgentRuntime,\n    message: Memory,\n    _state: State | undefined\n  ): Promise<boolean> => {\n    const text = message.content.text?.toLowerCase() || '';\n    \n    const keywords = [\n      'knowledge', 'stats', 'statistics', 'how many', 'molecules',\n      'auto', 'automatic', 'processed', 'files', 'knowledge base'\n    ];\n    \n    return keywords.some(keyword => text.includes(keyword));\n  },\n\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    _state: State | undefined,\n    _options: any,\n    callback?: HandlerCallback,\n    _responses?: Memory[]\n  ) => {\n    try {\n      logger.info('Handling AUTO_KNOWLEDGE_STATS action');\n\n      const autoService = runtime.getService<AutoKnowledgeService>('auto-knowledge');\n      \n      if (!autoService) {\n        const errorContent: Content = {\n          text: '‚ùå Auto knowledge service is not running. The service automatically monitors data/examples/ for Gaussian files.',\n          actions: ['AUTO_KNOWLEDGE_STATS'],\n          source: message.content.source,\n        };\n        \n        if (callback) await callback(errorContent);\n        return errorContent;\n      }\n\n      const stats = await autoService.getStats();\n      \n      if (stats.error) {\n        const errorContent: Content = {\n          text: `‚ùå Error getting knowledge stats: ${stats.error}`,\n          actions: ['AUTO_KNOWLEDGE_STATS'],\n          source: message.content.source,\n        };\n        \n        if (callback) await callback(errorContent);\n        return errorContent;\n      }\n\n      const responseText = `üß† **Automatic Knowledge Graph Status**\n\n**üìÅ Monitoring:** \\`${stats.watchedDirectory}\\`\n**üìä Knowledge Graph:** \\`${stats.knowledgeGraphPath}\\`\n\n**üìà Current Statistics:**\n‚Ä¢ **Files Processed:** ${stats.totalFiles}\n‚Ä¢ **Molecules:** ${stats.molecules}\n‚Ä¢ **SCF Energies:** ${stats.scfEnergies}  \n‚Ä¢ **Atoms:** ${stats.atoms}\n‚Ä¢ **Last Update:** ${new Date(stats.lastUpdate).toLocaleString()}\n\n${stats.totalFiles > 0 ? \n  `**üìÑ Processed Files:**\\n${stats.filesList.map((file: string) => `‚Ä¢ ${file}`).join('\\n')}` : \n  '**üìÑ No files processed yet**'\n}\n\nüí° **How it works:** Just copy \\`.log\\` or \\`.out\\` files to \\`data/examples/\\` and they'll be automatically processed into the knowledge graph!\n\n${stats.totalFiles === 0 ? \n  '\\nüöÄ **Get started:** Copy some Gaussian log files to `data/examples/` to see the knowledge graph grow automatically!' : \n  '\\nüîç **Search tip:** Ask me to \"search for energy\" or \"find molecules\" to explore the knowledge base!'\n}`;\n\n      const responseContent: Content = {\n        text: responseText,\n        actions: ['AUTO_KNOWLEDGE_STATS'],\n        source: message.content.source,\n      };\n\n      if (callback) await callback(responseContent);\n      return responseContent;\n\n    } catch (error) {\n      logger.error('Error in AUTO_KNOWLEDGE_STATS action:', error);\n      \n      const errorContent: Content = {\n        text: `‚ùå Failed to get knowledge stats: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        actions: ['AUTO_KNOWLEDGE_STATS'],\n        source: message.content.source,\n      };\n      \n      if (callback) await callback(errorContent);\n      return errorContent;\n    }\n  },\n\n  examples: [\n    [\n      {\n        name: '{{user1}}',\n        content: {\n          text: 'Show me knowledge graph statistics',\n        },\n      },\n      {\n        name: '{{user2}}',\n        content: {\n          text: 'üß† **Automatic Knowledge Graph Status**\\n\\n**üìÅ Monitoring:** `data/examples/`\\n**üìä Knowledge Graph:** `data/auto-knowledge-graph.ttl`\\n\\n**üìà Current Statistics:**\\n‚Ä¢ **Files Processed:** 2\\n‚Ä¢ **Molecules:** 2\\n‚Ä¢ **SCF Energies:** 2\\n‚Ä¢ **Atoms:** 30\\n‚Ä¢ **Last Update:** 1/15/2024, 10:30:00 AM\\n\\n**üìÑ Processed Files:**\\n‚Ä¢ lactone.log\\n‚Ä¢ TolueneEnergy.log\\n\\nüí° **How it works:** Just copy `.log` or `.out` files to `data/examples/` and they\\'ll be automatically processed into the knowledge graph!',\n          actions: ['AUTO_KNOWLEDGE_STATS'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{user1}}',\n        content: {\n          text: 'How many molecules do we have?',\n        },\n      },\n      {\n        name: '{{user2}}',\n        content: {\n          text: 'üß† **Automatic Knowledge Graph Status**\\n\\n**üìà Current Statistics:**\\n‚Ä¢ **Files Processed:** 3\\n‚Ä¢ **Molecules:** 3\\n‚Ä¢ **SCF Energies:** 3\\n‚Ä¢ **Atoms:** 45\\n\\n**üìÑ Processed Files:**\\n‚Ä¢ lactone.log\\n‚Ä¢ TolueneEnergy.log\\n‚Ä¢ example.log\\n\\nüîç **Search tip:** Ask me to \"search for energy\" or \"find molecules\" to explore the knowledge base!',\n          actions: ['AUTO_KNOWLEDGE_STATS'],\n        },\n      },\n    ],\n  ],\n}; ","import { myCompchemPlugin } from './plugin.ts';\n\nexport { myCompchemPlugin, CompchemService } from './plugin.ts';\nexport { AutoKnowledgeService } from './services/autoKnowledgeService';\nexport { autoKnowledgeAction } from './actions/autoKnowledgeAction';\nexport { PythonService } from './services/pythonService';\nexport { analyzeMolecularDataAction } from './actions/analyzeMolecularData';\nexport { generateVisualizationAction } from './actions/generateVisualization';\nexport { parseGaussianFileAction } from './actions/parseGaussianFile';\nexport { diagnosticsAction } from './actions/diagnostics';\nexport default myCompchemPlugin;\n"],"mappings":"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","names":["Service","logger","helloWorldAction","helloWorldProvider","logger","path","fs","fileURLToPath","__filename","fileURLToPath","__dirname","logger","fs","resolve","Service","logger","fs","path","logger","logger","extractMolecularDataFromMessage","logger","path","fs","fileURLToPath","__filename","__dirname","logger","path","fs","fileURLToPath","__filename","__dirname","dataDir","logger","logger","Service"]}